// Code generated by goyacc -l -o parser.go -p Informer parser.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import (
	"fmt"
)

type InformerSymType struct {
	yys int
	val int
}

var InformerToknames = [...]string{
	"$end",
	"error",
	"$unk",
}

var InformerStatenames = [...]string{}

const InformerEofCode = 1
const InformerErrCode = 2
const InformerInitialStackSize = 16

var InformerExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const InformerPrivate = 57344

const InformerLast = 1

var InformerAct = [...]int{
	1,
}

var InformerPact = [...]int{
	-1000, -1000,
}

var InformerPgo = [...]int{
	0, 0,
}

var InformerR1 = [...]int{
	0, 1,
}

var InformerR2 = [...]int{
	0, 0,
}

var InformerChk = [...]int{
	-1000, -1,
}

var InformerDef = [...]int{
	1, -2,
}

var InformerTok1 = [...]int{
	1,
}

var InformerTok2 = [...]int{
	2, 3,
}

var InformerTok3 = [...]int{
	0,
}

var InformerErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	InformerDebug        = 0
	InformerErrorVerbose = false
)

type InformerLexer interface {
	Lex(lval *InformerSymType) int
	Error(s string)
}

type InformerParser interface {
	Parse(InformerLexer) int
	Lookahead() int
}

type InformerParserImpl struct {
	lval  InformerSymType
	stack [InformerInitialStackSize]InformerSymType
	char  int
}

func (p *InformerParserImpl) Lookahead() int {
	return p.char
}

func InformerNewParser() InformerParser {
	return &InformerParserImpl{}
}

const InformerFlag = -1000

func InformerTokname(c int) string {
	if c >= 1 && c-1 < len(InformerToknames) {
		if InformerToknames[c-1] != "" {
			return InformerToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func InformerStatname(s int) string {
	if s >= 0 && s < len(InformerStatenames) {
		if InformerStatenames[s] != "" {
			return InformerStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func InformerErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !InformerErrorVerbose {
		return "syntax error"
	}

	for _, e := range InformerErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + InformerTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := InformerPact[state]
	for tok := TOKSTART; tok-1 < len(InformerToknames); tok++ {
		if n := base + tok; n >= 0 && n < InformerLast && InformerChk[InformerAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if InformerDef[state] == -2 {
		i := 0
		for InformerExca[i] != -1 || InformerExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; InformerExca[i] >= 0; i += 2 {
			tok := InformerExca[i]
			if tok < TOKSTART || InformerExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if InformerExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += InformerTokname(tok)
	}
	return res
}

func Informerlex1(lex InformerLexer, lval *InformerSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = InformerTok1[0]
		goto out
	}
	if char < len(InformerTok1) {
		token = InformerTok1[char]
		goto out
	}
	if char >= InformerPrivate {
		if char < InformerPrivate+len(InformerTok2) {
			token = InformerTok2[char-InformerPrivate]
			goto out
		}
	}
	for i := 0; i < len(InformerTok3); i += 2 {
		token = InformerTok3[i+0]
		if token == char {
			token = InformerTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = InformerTok2[1] /* unknown char */
	}
	if InformerDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", InformerTokname(token), uint(char))
	}
	return char, token
}

func InformerParse(Informerlex InformerLexer) int {
	return InformerNewParser().Parse(Informerlex)
}

func (Informerrcvr *InformerParserImpl) Parse(Informerlex InformerLexer) int {
	var Informern int
	var InformerVAL InformerSymType
	var InformerDollar []InformerSymType
	_ = InformerDollar // silence set and not used
	InformerS := Informerrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Informerstate := 0
	Informerrcvr.char = -1
	Informertoken := -1 // Informerrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Informerstate = -1
		Informerrcvr.char = -1
		Informertoken = -1
	}()
	Informerp := -1
	goto Informerstack

ret0:
	return 0

ret1:
	return 1

Informerstack:
	/* put a state and value onto the stack */
	if InformerDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", InformerTokname(Informertoken), InformerStatname(Informerstate))
	}

	Informerp++
	if Informerp >= len(InformerS) {
		nyys := make([]InformerSymType, len(InformerS)*2)
		copy(nyys, InformerS)
		InformerS = nyys
	}
	InformerS[Informerp] = InformerVAL
	InformerS[Informerp].yys = Informerstate

Informernewstate:
	Informern = InformerPact[Informerstate]
	if Informern <= InformerFlag {
		goto Informerdefault /* simple state */
	}
	if Informerrcvr.char < 0 {
		Informerrcvr.char, Informertoken = Informerlex1(Informerlex, &Informerrcvr.lval)
	}
	Informern += Informertoken
	if Informern < 0 || Informern >= InformerLast {
		goto Informerdefault
	}
	Informern = InformerAct[Informern]
	if InformerChk[Informern] == Informertoken { /* valid shift */
		Informerrcvr.char = -1
		Informertoken = -1
		InformerVAL = Informerrcvr.lval
		Informerstate = Informern
		if Errflag > 0 {
			Errflag--
		}
		goto Informerstack
	}

Informerdefault:
	/* default state action */
	Informern = InformerDef[Informerstate]
	if Informern == -2 {
		if Informerrcvr.char < 0 {
			Informerrcvr.char, Informertoken = Informerlex1(Informerlex, &Informerrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if InformerExca[xi+0] == -1 && InformerExca[xi+1] == Informerstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Informern = InformerExca[xi+0]
			if Informern < 0 || Informern == Informertoken {
				break
			}
		}
		Informern = InformerExca[xi+1]
		if Informern < 0 {
			goto ret0
		}
	}
	if Informern == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Informerlex.Error(InformerErrorMessage(Informerstate, Informertoken))
			Nerrs++
			if InformerDebug >= 1 {
				__yyfmt__.Printf("%s", InformerStatname(Informerstate))
				__yyfmt__.Printf(" saw %s\n", InformerTokname(Informertoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Informerp >= 0 {
				Informern = InformerPact[InformerS[Informerp].yys] + InformerErrCode
				if Informern >= 0 && Informern < InformerLast {
					Informerstate = InformerAct[Informern] /* simulate a shift of "error" */
					if InformerChk[Informerstate] == InformerErrCode {
						goto Informerstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if InformerDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", InformerS[Informerp].yys)
				}
				Informerp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if InformerDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", InformerTokname(Informertoken))
			}
			if Informertoken == InformerEofCode {
				goto ret1
			}
			Informerrcvr.char = -1
			Informertoken = -1
			goto Informernewstate /* try again in the same state */
		}
	}

	/* reduction by production Informern */
	if InformerDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Informern, InformerStatname(Informerstate))
	}

	Informernt := Informern
	Informerpt := Informerp
	_ = Informerpt // guard against "declared and not used"

	Informerp -= InformerR2[Informern]
	// Informerp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if Informerp+1 >= len(InformerS) {
		nyys := make([]InformerSymType, len(InformerS)*2)
		copy(nyys, InformerS)
		InformerS = nyys
	}
	InformerVAL = InformerS[Informerp+1]

	/* consult goto table to find next state */
	Informern = InformerR1[Informern]
	Informerg := InformerPgo[Informern]
	Informerj := Informerg + InformerS[Informerp].yys + 1

	if Informerj >= InformerLast {
		Informerstate = InformerAct[Informerg]
	} else {
		Informerstate = InformerAct[Informerj]
		if InformerChk[Informerstate] != -Informern {
			Informerstate = InformerAct[Informerg]
		}
	}
	// dummy call; replaced with literal code
	switch Informernt {

	case 1:
		InformerDollar = InformerS[Informerpt-0 : Informerpt+1]
		{
			fmt.Println("Hello")
		}
	}
	goto Informerstack /* stack new state and value */
}
